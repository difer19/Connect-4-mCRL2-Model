sort Mark = struct O|X|null;
	 Board = List(List(Mark));

map Rows: Nat;
	Columns: Nat;
	initBoard: Board;
	opponent: Mark->Mark;
	isWinner: Board#Mark->Bool;

 	replaceIn2D: Board#Nat#Nat#Mark->Board;
 	replaceIn1D: List(Mark)#Nat#Mark->List(Mark);

	getCol: Board#Nat -> List(Mark);
	getRowValue: List(Mark) -> Nat;

var m: Mark;
	b: Board;
	llst: Board;
 	i, j: Nat;
 	e, n: Mark;
	ls: List(Mark);
	columnIndex: Nat;


eqn 
	Rows = 6;
	Columns = 7;
	initBoard = [
		[null,null,null,null,null,null,null],
		[null,null,null,null,null,null,null],
		[null,null,null,null,null,null,null],
		[null,null,null,null,null,null,null],
		[null,null,null,null,null,null,null],
		[null,null,null,null,null,null,null]
	];
	
	
	
	opponent(X) = O;
	opponent(O) = X;
	
	isWinner(b,m) =
 		(exists row: Nat.(row<Rows && ((b.row.0==m && b.row.1==m && b.row.2==m && b.row.3==m) ||
							(b.row.1==m && b.row.2==m && b.row.3==m && b.row.4==m) ||
							(b.row.2==m && b.row.3==m && b.row.4==m && b.row.5==m) ||
							(b.row.3==m && b.row.4==m && b.row.5==m && b.row.6==m) ))) ||
											
 		(exists col: Nat.(col<Columns && ((b.0.col==m && b.1.col==m && b.2.col==m && b.3.col==m) ||
							(b.1.col==m && b.2.col==m && b.3.col==m && b.4.col==m) ||
							(b.2.col==m && b.3.col==m && b.4.col==m && b.5.col==m) ))) ||
 		
		(b.0.0  == m && b.1.1  == m && b.2.2  == m && b.3.3  == m ) ||
		(b.0.1  == m && b.1.2  == m && b.2.3  == m && b.3.4  == m ) ||
		(b.0.2  == m && b.1.3  == m && b.2.4  == m && b.3.5  == m ) ||
		(b.0.3  == m && b.1.4  == m && b.2.5  == m && b.3.6  == m ) ||
		(b.1.0  == m && b.2.1  == m && b.3.2  == m && b.4.3  == m ) ||
		(b.1.1  == m && b.2.2  == m && b.3.3  == m && b.4.4  == m ) ||
		(b.1.2  == m && b.2.3  == m && b.3.4  == m && b.4.5  == m ) ||
		(b.1.3  == m && b.2.4  == m && b.3.5  == m && b.4.6  == m ) ||
		(b.2.0  == m && b.3.1  == m && b.4.2  == m && b.5.3  == m ) ||
		(b.2.1  == m && b.3.2  == m && b.4.3  == m && b.5.4  == m ) ||
		(b.2.2  == m && b.3.3  == m && b.4.4  == m && b.5.5  == m ) ||
		(b.2.3  == m && b.3.4  == m && b.4.5  == m && b.5.6  == m ) ||
		(b.0.3  == m && b.1.2  == m && b.2.1  == m && b.3.0  == m ) ||
		(b.0.4  == m && b.1.3  == m && b.2.2  == m && b.3.1  == m ) ||
		(b.0.5  == m && b.1.4  == m && b.2.3  == m && b.3.2  == m ) ||
		(b.0.6  == m && b.1.5  == m && b.2.4  == m && b.3.3  == m ) ||
		(b.1.3  == m && b.2.2  == m && b.3.1  == m && b.4.0  == m ) ||
		(b.1.4  == m && b.2.3  == m && b.3.2  == m && b.4.1  == m ) ||
		(b.1.5  == m && b.2.4  == m && b.3.3  == m && b.4.2  == m ) ||
		(b.1.6  == m && b.2.5  == m && b.3.4  == m && b.4.3  == m ) ||
		(b.2.3  == m && b.3.2  == m && b.4.1  == m && b.5.0  == m ) ||
		(b.2.4  == m && b.3.3  == m && b.4.2  == m && b.5.1  == m ) ||
		(b.2.5  == m && b.3.4  == m && b.4.3  == m && b.5.2  == m ) ||
		(b.2.6  == m && b.3.5  == m && b.4.4  == m && b.5.3  == m ) ;


 	replaceIn2D ([], i, j, n)=[];

 	replaceIn2D(ls|>llst,i,j,n)=if(i==0,replaceIn1D(ls,j,n)|>llst,
 			ls|>replaceIn2D(llst, Int2Nat(i-1), j, n));

	replaceIn1D([], j, n) = [];

 	replaceIn1D(e|>ls,j,n) = if(j==0,n|>ls,
		 e|>replaceIn1D(ls, Int2Nat(j-1), n));

	getCol(b, columnIndex) =
    	if(columnIndex < Columns, 
		[b.0.columnIndex, b.1.columnIndex, b.2.columnIndex, b.3.columnIndex, b.4.columnIndex, b.5.columnIndex], 
	[]);


	getRowValue([]) = 8;
	getRowValue(ls) = if(rhead(ls)==null, #ls, getRowValue(rtail(ls)));



act place: Nat#Nat#Mark;
 	win: Mark;
	d,a,b,c;
	position: Nat#Nat;
	columnS : List(Mark);
	coordenada : Nat#Nat;
	bd : Board;

proc Player(b: Board, m: Mark, depht: Nat) =
	(depht <= 5) ->
 	(isWinner(b,opponent(m)) -> win(opponent(m)) . delta
	<> (sum c: Nat.(c<Columns && getRowValue(getCol(b, c)) != 8 )
	-> place(getRowValue(getCol(b,c)), c, m) 
	. Player(replaceIn2D(b, getRowValue(getCol(b,c)), c, m), opponent(m), depht + 1)))
	<> delta;


proc inDepht(b: Board, m: Mark, depth: Nat) =
	test3(b, opponent(m), Int2Nat(depth + 1));

proc replaceTab(b: Board, r: Nat, c:Nat, m: Mark, depth: Nat) =
	bd(replaceIn2D(b, Int2Nat(r-1), c, m)).
	inDepht(replaceIn2D(b, Int2Nat(r-1), c, m), m, depth);

proc defSucesor(b: Board, c: Nat, col: List(Mark), m: Mark, depth: Nat) =
	replaceTab(b, getRowValue(col), c, m, depth);

proc test3(b: Board, m: Mark, depth: Nat) = 
	(depth < 2) ->
		(sum c:Nat.(c < Columns) -> defSucesor(b, c, getCol(b,c), m, depth))
	<> delta;


proc test4(b: Board, m: Mark, depth: Nat) = 
	(isWinner(b,opponent(m))) ->
			win(opponent(m)) . delta
	<> (depth < 5) -> 
			sum c:Nat.(c < Columns) -> 
			bd(replaceIn2D(b, Int2Nat((getRowValue(getCol(b,c)))-1),c,m)).  
		 	test4(replaceIn2D(b, Int2Nat((getRowValue(getCol(b,c)))-1),c,m), opponent(m), Int2Nat(depth+1))
	<> delta;

init test4(initBoard, X, 0);




