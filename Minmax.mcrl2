% Modelo de representation de datos
sort Token = struct O|X|void;
	 Position = List(List(Token));

% Funciones
map Rows: Nat;
	Columns: Nat;
	initPosition: Position;
	next: Token->Token;
	isWinner: Position#Token->Bool;
	isFinal: Position -> Bool;

 	replaceBoard: Position#Nat#Nat#Token->Position;
 	replaceColumn: List(Token)#Nat#Token->List(Token);

	getCol: Position#Nat -> List(Token);
	getRowValue: List(Token) -> Nat;

	regList: List(Position)#Nat#Nat#List(Position)#Token -> List(Position);

	maxDepth: Nat;

% variables para las ecuaciones de las funciones
var m: Token;
	b: Position;
	llst: Position;
 	i, j: Nat;
 	e, n: Token;
	ls: List(Token);
	columnIndex: Nat;
    lp : List(Position);
	nl : List(Position);


% ecuaciones que describen en funcionamiento de las funciones
eqn 
	Rows = 6;
	Columns = 7;
	initPosition = [
		[void,void,void,void,void,void,void],
		[void,void,void,void,void,void,void],
		[void,void,void,void,void,void,void],
		[void,void,void,void,void,void,void],
		[void,void,void,void,void,void,void],
		[void,void,void,void,void,void,void]
	];
	
	
	
	next(X) = O;
	next(O) = X;
	
	isWinner(b,m) =
 		(exists row: Nat.(row<Rows && 
							((b.row.0==m && b.row.1==m && b.row.2==m && b.row.3==m) ||
							(b.row.1==m && b.row.2==m && b.row.3==m && b.row.4==m) ||
							(b.row.2==m && b.row.3==m && b.row.4==m && b.row.5==m) ||
							(b.row.3==m && b.row.4==m && b.row.5==m && b.row.6==m) ))) ||
											
 		(exists col: Nat.(col<Columns && 
							((b.0.col==m && b.1.col==m && b.2.col==m && b.3.col==m) ||
							(b.1.col==m && b.2.col==m && b.3.col==m && b.4.col==m) ||
							(b.2.col==m && b.3.col==m && b.4.col==m && b.5.col==m) ))) ||
 		
		(b.0.0  == m && b.1.1  == m && b.2.2  == m && b.3.3  == m ) ||
		(b.0.1  == m && b.1.2  == m && b.2.3  == m && b.3.4  == m ) ||
		(b.0.2  == m && b.1.3  == m && b.2.4  == m && b.3.5  == m ) ||
		(b.0.3  == m && b.1.4  == m && b.2.5  == m && b.3.6  == m ) ||
		(b.1.0  == m && b.2.1  == m && b.3.2  == m && b.4.3  == m ) ||
		(b.1.1  == m && b.2.2  == m && b.3.3  == m && b.4.4  == m ) ||
		(b.1.2  == m && b.2.3  == m && b.3.4  == m && b.4.5  == m ) ||
		(b.1.3  == m && b.2.4  == m && b.3.5  == m && b.4.6  == m ) ||
		(b.2.0  == m && b.3.1  == m && b.4.2  == m && b.5.3  == m ) ||
		(b.2.1  == m && b.3.2  == m && b.4.3  == m && b.5.4  == m ) ||
		(b.2.2  == m && b.3.3  == m && b.4.4  == m && b.5.5  == m ) ||
		(b.2.3  == m && b.3.4  == m && b.4.5  == m && b.5.6  == m ) ||
		(b.0.3  == m && b.1.2  == m && b.2.1  == m && b.3.0  == m ) ||
		(b.0.4  == m && b.1.3  == m && b.2.2  == m && b.3.1  == m ) ||
		(b.0.5  == m && b.1.4  == m && b.2.3  == m && b.3.2  == m ) ||
		(b.0.6  == m && b.1.5  == m && b.2.4  == m && b.3.3  == m ) ||
		(b.1.3  == m && b.2.2  == m && b.3.1  == m && b.4.0  == m ) ||
		(b.1.4  == m && b.2.3  == m && b.3.2  == m && b.4.1  == m ) ||
		(b.1.5  == m && b.2.4  == m && b.3.3  == m && b.4.2  == m ) ||
		(b.1.6  == m && b.2.5  == m && b.3.4  == m && b.4.3  == m ) ||
		(b.2.3  == m && b.3.2  == m && b.4.1  == m && b.5.0  == m ) ||
		(b.2.4  == m && b.3.3  == m && b.4.2  == m && b.5.1  == m ) ||
		(b.2.5  == m && b.3.4  == m && b.4.3  == m && b.5.2  == m ) ||
		(b.2.6  == m && b.3.5  == m && b.4.4  == m && b.5.3  == m ) ;

	isFinal(b) = isWinner(b, X) || isWinner(b, O) || 
			!exists row, column : Nat.(row < Rows && column < Columns && b.row.column == void);


 	replaceBoard ([], i, j, n)=[];

 	replaceBoard(ls|>llst,i,j,n)=if(i==0,replaceColumn(ls,j,n)|>llst,
 			ls|>replaceBoard(llst, Int2Nat(i-1), j, n));

	replaceColumn([], j, n) = [];

 	replaceColumn(e|>ls,j,n) = if(j==0,n|>ls,
		 e|>replaceColumn(ls, Int2Nat(j-1), n));

	getCol(b, columnIndex) =
    	if(columnIndex < Columns, 
		[b.0.columnIndex, b.1.columnIndex, b.2.columnIndex, b.3.columnIndex, b.4.columnIndex, b.5.columnIndex], 
	[]);


	getRowValue([]) = 8;
	getRowValue(ls) = if(rhead(ls)==void, #ls, getRowValue(rtail(ls)));

	regList(lp, i, j, nl, m) =
		if(i == #lp, nl, if(j < Columns, regList(lp, i,Int2Nat(j+1), 
		nl<|replaceBoard(lp.i, Int2Nat((getRowValue(getCol(lp.i,j)))-1),j,m), m),
		regList(lp, Int2Nat(i+1), 0, nl, m)));

	maxDepth = 1;


% acciones
act backtracking, defSuccessor, defList, defSuccessorGen;
	max : Nat#Nat#Nat#Token;
	min : Nat#Nat#Nat#Token;
	

% proc defSuc(b: List(Position), i: Nat, j: Nat, nl: List(Position), m: Token, depth: Nat, thread: Nat) =
%     defList.(i == #b) -> Minmax(nl, m, depth, thread)
%     <> (j < Columns) -> defSuc(b, i, Int2Nat(j+1), nl<|replaceBoard(b.i, Int2Nat((getRowValue(getCol(b.i,j)))-1),j,m), m, depth, thread)
%     <> defSuc(b, Int2Nat(i+1), 0, nl , m, depth, thread);

proc defSuc(b: List(Position), i: Nat, j: Nat, nl: List(Position), m: Token, depth: Nat, thread: Nat) =
	Minmax(regList(b, i, j, nl, m), m, depth, thread);

proc Minmax(b: List(Position), m: Token, depth: Nat, thread: Nat) = 
	(depth <= maxDepth ) -> 
		(m == X) -> max(#b, depth, thread, m).defSuc(b, 0, 0, [], next(m), Int2Nat(depth+1), thread)
        <> min(#b, depth, thread, m).defSuc(b, 0, 0, [], next(m), Int2Nat(depth+1), thread)
	<> backtracking.defSuccessor.delta;

proc processPool(b: Position, m: Token, depth: Nat, column: Nat, thread: Nat) =
	(void in getCol(b,column)) -> 
		Minmax([replaceBoard(b, Int2Nat((getRowValue(getCol(b,column)))-1),column,m)], m, Int2Nat(depth+1), thread);

init hide ({defList}, 
	block ({defSuccessor}, 
		comm({defSuccessor|defSuccessor|defSuccessor -> defSuccessorGen},
			processPool(initPosition, X, 0, 0, 1) || processPool(initPosition, X, 0, 1, 2)
			|| processPool(initPosition, X, 0, 2, 3) || processPool(initPosition, X, 0, 3, 4)
			|| processPool(initPosition, X, 0, 4, 5) || processPool(initPosition, X, 0, 5, 6)
			|| processPool(initPosition, X, 0, 6, 7))));
